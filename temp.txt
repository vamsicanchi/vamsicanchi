log.py

class dl_logger():
    
    def __init__(self):
        self.test = logger.bind(task="test")
        logger.add("logs/test.log", format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}", colorize = True, filter=lambda record: record["extra"]["task"] == "test")
        self.train = logger.bind(task="train")
        logger.add("logs/train.log", format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}", colorize = True, filter=lambda record: record["extra"]["task"] == "train")
        # self.train = logger.bind(task="config")
        # logger.add("logs/config.log", format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}", colorize = True, filter=lambda record: record["extra"]["task"] == "config")
    def info(self, message, task):
        if task=="test":
            self.test.info(message)
        if task=="train":
            self.train.info(message)


properties.json
{
    "project": {
        "name": "piephi",
        "client": "dev"
    },
    "paths":{
        "root_dir"          : "../",
        "working_dir"       : "./",
        "log_dir": "../logs",
        "searchable_pdf_temp": "../data/temp/pdf",
        "text_file_temp": "../data/temp/text"
        
    },
    "files":{
        "image_extensions": [".png", ".jpg", ".jpeg", ".tiff"],
        "excel_extensions": [],
        "pdf_extensions":[],
        "word_extensions": [],
        "ppt_extensions": [],
        "video_extensions": [],
        "audio_extensions": [],
        "other_extensions": [],
        "allowed_extensions": [],
        "not_allowed_extensions": []
    },
    "tesseract": {     
        "config_string": {
            "oem": "1",
            "psm": "6",
            "correct_osd": false,
            "language": "eng",
            "landetect": false,
            "tessdata_dir": "../bin/configuration/tessdata",
            "char_whitelist": "",
            "char_blacklist": "",
            "preserve_interword_spaces": true 
        },
        "config_data": {
            "oem": "1",
            "psm": "11",
            "language": "eng"
        },
        "config_osd": {
            "center": null,
            "scale": 0.5
        }
    },
    "opencv": {
        "modules": {
            "grayscale": true,
            "scaling": true,
            "thresholding": true,
            "grayscale1": true,
            "grayscale2": true,
            "grayscale3": true,
            "grayscale4": true,
            "grayscale5": true,
            "grayscale6": true,
            "grayscale7": true,
            "grayscale8": true,
            "grayscale9": true,
            "grayscale10": true
        },
        "grayscale": {

        },
        "scaling": {
            "scale_percent": 150,
            "inter_polation": 0
        },
        "thresholding": {}
    },
    "extraction": {
        "camelot": {
        },
        "ocrmypdf": {
            "language": null, 
            "image_dpi": 300, 
            "output_type": null, 
            "sidecar": null, 
            "jobs": null, 
            "use_threads": null, 
            "title": null, 
            "author": null, 
            "subject": null, 
            "keywords": null, 
            "rotate_pages": null, 
            "remove_background": null, 
            "deskew": true, 
            "clean": null, 
            "clean_final": null, 
            "unpaper_args": null, 
            "oversample": null, 
            "remove_vectors": null, 
            "threshold": null, 
            "force_ocr": null, 
            "skip_text": null, 
            "redo_ocr": null, 
            "skip_big": null, 
            "optimize": null, 
            "jpg_quality": null, 
            "png_quality": null, 
            "jbig2_lossy": null, 
            "jbig2_page_group_size": null, 
            "pages": null, 
            "max_image_mpixels": null, 
            "tesseract_config": null, 
            "tesseract_pagesegmode": null, 
            "tesseract_oem": null, 
            "pdf_renderer": null, 
            "tesseract_timeout": null, 
            "rotate_pages_threshold": null, 
            "pdfa_image_compression": null, 
            "user_words": null, 
            "user_patterns": null, 
            "fast_web_view": null, 
            "plugins": null, 
            "plugin_manager": null, 
            "keep_temporary_files": null, 
            "progress_bar": null
        }
    },
    "classification": {
        
    }
}
appconfig.py
# Python Imports 
import os
import sys
import json
import math
import random
import warnings
from typing import Optional
from datetime import datetime
from itertools import product
from collections import Counter

# Library Imports
import torch

# Custom Imports

# Gloabal Variable/Settings

try:
    assert(os.getcwd()=="D:\\igis\\aiml\\core")
except AssertionError:
    os.chdir("D:\\igis\\aiml\\core")

with open("config/properties.json", "r") as properties:
    config = json.load(properties)

anchors                             = [[(0.28, 0.22), (0.38, 0.48), (0.9, 0.78)],
                                       [(0.07, 0.15), (0.15, 0.11), (0.14, 0.29)],
                                       [(0.02, 0.03), (0.04, 0.07), (0.08, 0.06)]]
scales                              = [config["dl"]["yolov3"]["image_size"] // 32, 
                                       config["dl"]["yolov3"]["image_size"] // 16, 
                                       config["dl"]["yolov3"]["image_size"] // 8]
device                              = "cuda" if torch.cuda.is_available() else "cpu"
config["device"]                    = device
config["dl"]["yolov3"]["anchors"]   = anchors
config["dl"]["yolov3"]["scales"]    = scales
ocr.py
# coding: utf-8

# Python Imports
import os
import re
import sys
import json
import glob
import time
import math
import timeit
import pathlib
import datetime
import dateutil

from sys import exc_info
from traceback import format_exception

# Library Imports
import cv2 as cv
import pytesseract
import camelot

# Custom Import


def print_exception():
    etype, value, tb = exc_info()
    info, error = format_exception(etype, value, tb)[-2:]
    print(f'Exception in:\n{info}\n{error}')

class Tesseract:

    """
    tesseract-ocr class for extracting text from images along with confidence, coordinates of each word in python
    """
    
    def __init__(self, tesseract_config):
        
        """
        Initialization to retrieve the user defined config to tesseract-ocr v4.1.1 & use as functional argument when calling pytesseract library

        config_string: ocr text extraction configuration parameters dictionary
                        {
                            "oem"           : "",
                            "psm"           : "",
                            "correct_osd"   : boolean,
                            "language"      : "",
                            "landetect"     : boolean,
                            "tessdata_dir"  : "",
                            "char_whitelist": "",
                            "char_blacklist": "",
                            "preserve_interword_spaces": boolean 
                        } 
        config_data: ocr words confidence & coordinates configuration parameters dictionary
                        {
                            "oem"           : "",
                            "psm"           : "",
                            "language"      : ""
                        } 
        """

        self.config_string  = tesseract_config["config_string"]
        self.config_data    = tesseract_config["config_data"]
        self.config_osd     = tesseract_config["config_osd"]
        
        self.string_config  = ""
        self.data_config = ""

        try:
            
            if self.config_string["language"]!="":
                str_lang = " -l "+self.config_string["language"]
            else:
                str_lang = ""
        
            if self.config_string["oem"]!="":
                str_oem = " --oem "+self.config_string["oem"]
            else:
                str_oem = ""
            
            if self.config_string["psm"]!="":
                str_psm = " --psm "+self.config_string["psm"]
            else:
                str_psm = ""
            
            if self.config_string["char_whitelist"]!="":
                str_whitelist = " -c tessdata_char_whitelist "+self.config_string["char_whitelist"]
            else:
                str_whitelist = ""
            
            if self.config_string["char_blacklist"]!="":
                str_blacklist = " -c tessdata_char_blacklist "+self.config_string["char_blacklist"]
            else:
                str_blacklist = ""
            
            if self.config_string["tessdata_dir"]!="":
                str_tessdir = " --tessdata-dir "+self.config_string["tessdata_dir"]
            else:
                str_tessdir = ""

            if self.config_string["preserve_interword_spaces"]:
                str_preservespaces = " -c tessdata_char_blacklist=1 "
            else:
                str_preservespaces = ""

            self.string_config  =  str_lang + str_psm + str_oem  + str_preservespaces + str_whitelist + str_blacklist + str_tessdir

            if self.config_data["language"]!="":
                data_lang = " -l "+self.config_data["language"]
            else:
                data_lang = ""
        
            if self.config_data["oem"]!="":
                data_oem = " --oem "+self.config_data["oem"]
            else:
                data_oem = ""
            
            if self.config_data["psm"]!="":
                data_psm = " --psm "+self.config_data["psm"]
            else:
                str_psm = ""

            self.data_config = data_lang + data_psm + data_oem

        except Exception as excep:
            print_exception()

    def tesseract_osd(self, image):

        """
        Function to correct image orietation by calling pytesseract library

        config_osd: ocr words confidence & coordinates configuration parameters dictionary
                        {
                            "center"           : "",
                            "scale"            : ""
                        } 
        """
        
        try:
            osd = pytesseract.image_to_osd(image)

            angle = 360 - int(re.search('(?<=rotate: )\d+', osd.lower()).group(0))
            script = re.search('(?<=script: )[a-z]+', osd.lower()).group(0)

            (h,w) = image.shape[:2]

            if self.config_osd["center"] is None:
                center = (w/2,h/2)
            elif isinstance(self.config_osd["center"], list):
                center = tuple(self.config_osd["center"])

            transformation_matrix = cv.getRotationMatrix2D(center, angle, self.config_osd["scale"])
            rotated_image = cv.warpAffine(image, transformation_matrix, (w, h))
            image = rotated_image

        except Exception as excep:
            etype, value, tb = exc_info()
            info, error = format_exception(etype, value, tb)[-2:]
            print(f'Exception in:\n{info}\n{error}')

        return image

    def tesseract_ocr(self, image):
        """
        Function to run tesseract-ocr on given image and extract whole text in string format with user defined tesseract config

        string_config: from class instantiation

        returns python string

        """
        
        self.extracted_string = ""

        try:
            self.extracted_string = pytesseract.image_to_string(image, config=self.string_config)
        except Exception as excep:
            print_exception()

        return self.extracted_string

    def tesseract_ocr_metadata(self, image):
        """
        Function to run tesseract-ocr on given image and get confidence & coordinates of each word in image with user defined tesseract config

        data_config: from class instantiation

        returns python dictionary

        """
        
        self.extracted_data = {}

        try:
            self.extracted_data = pytesseract.image_to_data(image, config=self.data_config, output_type=pytesseract.Output.DICT)
        except Exception as excep:
            print_exception()

        return self.extracted_data

    def tesseract_searchable_pdf(self, image):
        """
        Function to convert an image to searchable pdf
        """
        
        try:
            searchable_pdf = pytesseract.image_to_pdf_or_hocr(image, config=self.string_config, extension='pdf')
        except Exception as excep:
            print("Exception in searchable pdf function")
            print_exception()

        return searchable_pdf

    def tesseract_string_to_dict(self, extracted_string):
        
        """
        Function to covert ocr'd text from one image into python dictionary with line number as keys

        extracted_string: python string with all text from each image line by line

        returns python dictionary

        """

        self.result_dict = {}
        line_number = 0
        try:
            data = self.extracted_string.split("\n")
            for line in data:
                if line==" " or line=="":
                    pass
                else:
                    line_number+=1
                    self.result_dict[line_number]=line
        except Exception as  excep:
            print_exception()

        return self.result_dict

    def tesseract_run(self, image, image_path):

        image_osd           = self.tesseract_osd(image)
        text_data           = self.tesseract_ocr(image_osd)
        text_data_dict      = self.tesseract_string_to_dict(text_data)
        text_metadata       = self.tesseract_ocr_metadata(image_osd)
        searchable_pdf      = self.tesseract_searchable_pdf(image_path) 

        return image_osd, text_data, text_data_dict, text_metadata, searchable_pdf
extract.py
# coding: utf-8

# Python Imports
import os
import re
import sys
import json
import glob
import time
import math
import timeit
import tempfile
import pathlib
import datetime
import dateutil

from sys import exc_info
from traceback import format_exception

# Library Imports
import PIL
import cv2 as cv
import numpy as np
import pandas as pd
import camelot
import tabula
import pdf2image
import pdf_statement_reader
import pdfminer
import PyPDF2
import PyPDF3
import ocrlayout
import ocrmypdf

def print_exception():
    etype, value, tb = exc_info()
    info, error = format_exception(etype, value, tb)[-2:]
    print(f'Exception in:\n{info}\n{error}')

class Extract:
    
    def __init__(self, path_config, extraction_config):
        
        self._searchable_pdf_temp = path_config["searchable_pdf_temp"]
        self._text_file_temp      = path_config["text_file_temp"]
        self._ocr_my_pdf          = extraction_config["ocrmypdf"]
        self._camelot             = extraction_config["camelot"]

    def searchable_pdf_temp(self, searchable_pdf):

        try:
            tempfile.tempdir = self._searchable_pdf_temp
            _, temp_file = tempfile.mkstemp(suffix = '.pdf')
            with open(temp_file,'w+b') as fw:
                fw.write(searchable_pdf)

        except Exception as excep:
            print("\n exception in searchable_pdf_temp function \n")
            print_exception()

        return temp_file

    def apply_ocrmypdf(self, image_path):

        try:
            tempfile.tempdir = self._searchable_pdf_temp
            _, temp_file = tempfile.mkstemp(suffix = '.pdf')
            ocrmypdf.ocr(image_path, 
                         temp_file, 
                         language=self._ocr_my_pdf["language"],
                         output_type=self._ocr_my_pdf["output_type"],
                         sidecar=self._ocr_my_pdf["sidecar"],
                         jobs=self._ocr_my_pdf["jobs"],
                         use_threads=self._ocr_my_pdf["use_threads"],
                         title=self._ocr_my_pdf["title"],
                         author=self._ocr_my_pdf["author"],
                         subject=self._ocr_my_pdf["subject"],
                         keywords=self._ocr_my_pdf["keywords"],
                         rotate_pages=self._ocr_my_pdf["rotate_pages"],
                         image_dpi=self._ocr_my_pdf["image_dpi"],
                         remove_background=self._ocr_my_pdf["remove_background"],
                         deskew=self._ocr_my_pdf["deskew"],
                         clean=self._ocr_my_pdf["clean"],
                         clean_final=self._ocr_my_pdf["clean_final"],
                         unpaper_args=self._ocr_my_pdf["unpaper_args"],
                         oversample=self._ocr_my_pdf["oversample"],
                         remove_vectors=self._ocr_my_pdf["remove_vectors"],
                         threshold=self._ocr_my_pdf["threshold"],
                         force_ocr=self._ocr_my_pdf["force_ocr"],
                         skip_text=self._ocr_my_pdf["skip_text"],
                         redo_ocr=self._ocr_my_pdf["redo_ocr"],
                         skip_big=self._ocr_my_pdf["skip_big"],
                         optimize=self._ocr_my_pdf["optimize"],
                         jpg_quality=self._ocr_my_pdf["jpg_quality"],
                         png_quality=self._ocr_my_pdf["png_quality"],
                         jbig2_lossy=self._ocr_my_pdf["jbig2_lossy"],
                         jbig2_page_group_size=self._ocr_my_pdf["jbig2_page_group_size"],
                         pages=self._ocr_my_pdf["pages"],
                         max_image_mpixels=self._ocr_my_pdf["max_image_mpixels"],
                         tesseract_config=self._ocr_my_pdf["tesseract_config"],
                         tesseract_pagesegmode=self._ocr_my_pdf["tesseract_pagesegmode"],
                         tesseract_oem=self._ocr_my_pdf["tesseract_oem"],
                         pdf_renderer=self._ocr_my_pdf["pdf_renderer"],
                         tesseract_timeout=self._ocr_my_pdf["tesseract_timeout"],
                         rotate_pages_threshold=self._ocr_my_pdf["rotate_pages_threshold"],
                         pdfa_image_compression=self._ocr_my_pdf["pdfa_image_compression"],
                         user_words=self._ocr_my_pdf["user_words"],
                         user_patterns=self._ocr_my_pdf["user_patterns"],
                         fast_web_view=self._ocr_my_pdf["fast_web_view"],
                         plugins=self._ocr_my_pdf["plugins"],
                         plugin_manager=self._ocr_my_pdf["plugin_manager"],
                         keep_temporary_files=self._ocr_my_pdf["keep_temporary_files"],
                         progress_bar=self._ocr_my_pdf["progress_bar"]                      
                        )

        except Exception as excep:
            print("\n exception in apply_ocrmypdf function \n")
            print_exception()

        return temp_file
        
    def apply_camelot(self, temp_pdf_path):
        
        tables = camelot.read_pdf(temp_pdf_path, flavor='stream') 

        return tables
opencv.py
# Python Imports 
import os
import sys
import json
import math
import random
import warnings

# Library Imports
import cv2
import numpy as np

# Custom Imports

# Gloabal Variable/Settings
warnings.filterwarnings("ignore")

def resize_image_opencv_pad(input_image, output_image, resize_image_width, resize_image_height, color=(255,255,255)):

    img = cv2.imread(input_image)
    
    old_image_height, old_image_width, channels = img.shape

    # create new image of desired size and color for padding
    result = np.full((resize_image_height, resize_image_width, channels), color, dtype=np.uint8)

    # copy img image into top right corner of result (plain white image) image
    result[0:old_image_height, 0:old_image_width] = img

    cv2.imwrite(output_image, result)

def resize_image_opencv(input_image, output_image, resize_to_width, resize_to_height):

    img = cv2.imread(input_image, cv2.IMREAD_UNCHANGED)

    h, w = img.shape[:2]
    pad_bottom, pad_right = 0, 0
    ratio = w / h

    if h > resize_to_height or w > resize_to_width:
        # shrinking image algorithm
        interp = cv2.INTER_AREA
    else:
        # stretching image algorithm
        interp = cv2.INTER_CUBIC

    w = resize_to_width
    h = round(w / ratio)
    if h > resize_to_height:
        h = resize_to_height
        w = round(h * ratio)
    pad_bottom = abs(resize_to_height - h)
    pad_right = abs(resize_to_width - w)

    scaled_img = cv2.resize(img, (w, h), interpolation=interp)
    padded_img = cv2.copyMakeBorder(scaled_img,0,pad_bottom,0,pad_right,borderType=cv2.BORDER_CONSTANT,value=[0,0,0])

    cv2.imwrite(output_image, padded_img)

def resize_all_opencv(input_path, output_path, resize_to_width, resize_to_height, allowed_image_extensions):

    # get all the pictures in directory
    images = []

    for root, dirs, files in os.walk(input_path):
        for file in files:
            if file.endswith(tuple(allowed_image_extensions)):
                images.append(os.path.join(root, file))

    for image in images:

        filename_ext = os.path.basename(image).split(".")

        img = cv2.imread(image, cv2.IMREAD_UNCHANGED)

        h, w = img.shape[:2]
        pad_bottom, pad_right = 0, 0
        ratio = w / h

        if h > resize_to_height or w > resize_to_width:
            # shrinking image algorithm
            interp = cv2.INTER_AREA
        else:
            # stretching image algorithm
            interp = cv2.INTER_CUBIC

        w = resize_to_width
        h = round(w / ratio)
        if h > resize_to_height:
            h = resize_to_height
            w = round(h * ratio)
        pad_bottom = abs(resize_to_height - h)
        pad_right = abs(resize_to_width - w)

        scaled_img = cv2.resize(img, (w, h), interpolation=interp)
        padded_img = cv2.copyMakeBorder(
            scaled_img,0,pad_bottom,0,pad_right,borderType=cv2.BORDER_CONSTANT,value=[0,0,0])
        
        cv2.imwrite(os.path.join(output_path, filename_ext[0]+"_resized."+filename_ext[1]), padded_img)

def display_images_from_path(config, path, log):
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith(tuple(config["files"]["allowed_image_extensions"])):
                img = cv2.imread(os.path.join(root,file))
                cv2.imshow(config["opencv"]["window_name"], img)
                cv2.waitKey(0)
                cv2.destroyAllWindows()


import os
import cv2
import warnings
import img2pdf
import pdf2image
import pytesseract
import numpy as np
import pandas as pd
from PIL import Image
from pprint import pprint

warnings.filterwarnings('ignore')
pd.set_option('display.max_colwidth', None)

pytesseract.pytesseract.tesseract_cmd = r'D:\Tesseract-OCR\tesseract.exe'
poppler_path                          = 'D:\\poppler-0.68.0\\bin'
files                                 = ["Invoice_Sample_2.pdf"] 

def extract(file):
    
    if file.endswith((".png")):
        custom_oem_psm_config   = r'--oem 3 -c preserve_interword_spaces=1  --psm 3'
        image                   = Image.open(file)
        data                    = pytesseract.image_to_data(image, config=custom_oem_psm_config, output_type=pytesseract.Output.DATAFRAME, pandas_config=pytesseract.Output.DATAFRAME)
        # data.to_csv(file.replace(".pdf",".csv"))

    elif file.endswith((".pdf")):
        custom_oem_psm_config   = r'--oem 3 -c preserve_interword_spaces=1  --psm 3'
        image                   = pdf2image.convert_from_path(file, 500, poppler_path=poppler_path)
        opencvImage             = cv2.cvtColor(np.array(image[0]), cv2.COLOR_RGB2BGR)
        data                    = pytesseract.image_to_data(image[0], config=custom_oem_psm_config, output_type=pytesseract.Output.DATAFRAME, pandas_config=pytesseract.Output.DATAFRAME)
        data['centroid_x'] = 0
        data['centroid_y'] = 0
        n_boxes            = len(data['level'])
        for i in range(n_boxes):
            data['centroid_x'][i] = (data['left'][i]+data['left'][i]+data['width'][i])/2
            data['centroid_y'][i] = (data['top'][i]+data['top'][i]+data['height'][i])/2 
        
        data['centroid_tuple'] = data[['centroid_x', 'centroid_y']].apply(tuple, axis=1)
        data['table'] = False
        
        # tuple below is table column name and threhold
        table_columns               = [('DATE',101), ('ACTIVITY',110), ('DESCRIPTION',110), ('AMOUNT', 60)]
        table_columns_row_single    = {}
        table_columns_row_multiple  = {}

        for column in table_columns:
            df  = data[data['text'].fillna("NA").str.contains(column[0])]
            lis = list(df['centroid_tuple'].values)
            if len(lis)==1:
                table_columns_row_single[column[0]] = lis
            else:
                table_columns_row_multiple[column[0]] = lis

        for k1,v1 in table_columns_row_multiple.items():
            temp = []
            for centroid in v1:
                for k2,v2 in table_columns_row_single.items():
                    if v2[0][1]-centroid[1]<20:
                        temp.append(centroid)  
            table_columns_row_single[k1] = list(set(temp)) 
        
        amount_col      = []
        date_col        = []
        activity_col    = []
        description_col = []
         
        for column in table_columns:
            nearby_x_value = table_columns_row_single[column[0]][0][0]
            nearby_y_value = table_columns_row_single[column[0]][0][1]
            for i in range(n_boxes):
                if data['conf'][i]!=np.float64(-1.0):
                    if abs(data['centroid_x'][i]-nearby_x_value)<np.float64(column[1]):
                        data["table"][i] = True
                        if column[0]=='AMOUNT' and data['centroid_y'][i]>=nearby_y_value:
                            amount_col.append(list(data.iloc[i]))
                        elif column[0]=='DATE' and data['centroid_y'][i]>=nearby_y_value:
                            date_col.append(list(data.iloc[i]))
                        elif column[0]=='ACTIVITY' and data['centroid_y'][i]>=nearby_y_value:
                            activity_col.append(list(data.iloc[i]))
                        elif column[0]=='DESCRIPTION' and data['centroid_y'][i]>=nearby_y_value:
                            description_col.append(list(data.iloc[i]))

        data_table = data[data["table"]]
        
        data_table = data_table[['text','centroid_x','centroid_y','centroid_tuple']]

        
        print("Amount Column....")
        amount_df = pd.DataFrame(amount_col, columns=data.columns)
        amount_df = amount_df[['text','centroid_x','centroid_y','centroid_tuple']]
        print(amount_df)
 
        
        print("Date Column....")
        date_df = pd.DataFrame(date_col, columns=data.columns)
        date_df = date_df[['text','centroid_x','centroid_y','centroid_tuple']]
        print(date_df)

            
        print("Activity Column....")
        activity_df = pd.DataFrame(activity_col, columns=data.columns)
        activity_df = activity_df[['text','centroid_x','centroid_y','centroid_tuple']]
        print(activity_df)

            
        print("Description Column....")
        description_df = pd.DataFrame(description_col, columns=data.columns)
        description_df = description_df[['text','centroid_x','centroid_y','centroid_tuple']]
        print(description_df)
        
        
    for file in files:
        extract(file)
